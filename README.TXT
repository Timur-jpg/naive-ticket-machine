JO
New project 
Day 2
Project: naive-ticket-machine
Authors: David Barnes and Michael Kölling

This project is part of the material for the book

   Objects First with Java - A Practical Introduction using BlueJ
   Seventh edition
   David J. Barnes and Michael Kölling
   Pearson Education

It is discussed in chapter 2.

Purpose of project: To illustrate the basics of fields, constructors, and methods.
How to start this project: Create one or more TicketMachine objects.



Answers: 

Part 2

 Question 2: The value returned is 0
 
 Question 3: Yes, I do notice something strange about the machine’s behavior. 
             If I insert too much money into the machine, it will give me the ticket, but it won't give me any refund. 
             If I do not insert enough and then try to print a ticket, it will still give me the ticket and take the money.
                                                                                                                     
 Question 5: Yes it does look different but it's only the price on the ticket that changed, the other tings stayed the same.
 
 Question 6: 
 
 Question 7: Yes, it does matter because when you change it, it marks the class diagram in red marks. Plus I cannot create a new object and it deletes my previous objects. 
             When I press the compile button, it redirect me too the source, where there is message on the bottom "<identifier> expected".
             I think the message itself doesn't give me a lot of information making it hard to know the problem.  
 
 Question 10: fields: price, balance, and total
              constructor: TicketMachine
              methods: getPrice, getBalance, insertMoney and printTicket
              
 Question 11: The constructor has a single formal parameter, cost, but the method has none. The constructor has no return type unlike the method.
 
 Question 12: int, Student and Server
 
 Question 13: alive, tutor and game
 
 Question 14: Student, server, person and game
 
 Question 15: Yes, the order does matter.
              Yes, it does give me a clue by marking the class diagram in red marks which makes it impossible to compile.

 Question 16: Yes, it is always necessary to have a semicolon at the end of a field declaration because otherwise it will mark the class diagram in red marks and make it impossible to compilele.
 
 Question 18: It belongs to student class.
 
 Question 19: It has 2 parameters, their types are string and double.

 Question 20: I don't think the value of the constructor’s parameters will need to be stored somewhere persistent, I think that they are temporary.
              The types some of the Book class’s fields might be are String and double, from the parameters in its constructor
              ??????????
              
              Can we know anything for sure about the names of its fields?
 
 Question 21: public Pet(String petsName)    
              
              {
                name=petsName;
              }
 
 
 Question 22: public Date (string month, int day, int year) 
 
 Question 23: The one difference between the headers is their names and the one difference between the bodies is the variable their return.   
 
 Question 24: I would characterize it as “How much money is in the account?”
 
 Question 25: No, the return statement in the body of the method doesn't need to be changed for the code to compile.
              This tell me that the name of an accessor method and the name of the field associated with it can be different. 
 
 Question 27: When I try compiling the class, the error message that I see now is "not a statement"
 
 Question 28: Apart from their names, the main difference between them are there return type.  
 
 Question 29: 
 
 
 
 